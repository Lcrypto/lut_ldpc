/*!
 * \file
 * \brief Program to convert .dat files generated by the PEG program to .alist format
 * \author Michael Meidlinger
 *
 * -------------------------------------------------------------------------
 *
 * Copyright (C) 2016 Michael Meidlinger - All Rights Reserved
 *
 */

#include <itpp/itbase.h>

using namespace itpp;
using namespace std;
int main(int argc, char **argv){
    // Parse file name
    if(argc!=3){
        cout << "Usage: dat2alist infile.dat outfile.alist" << endl;
        return EXIT_FAILURE;
    }
    
    string datfilename(argv[1]);
    string alistfilename(argv[2]);
    
    string line;
    stringstream ss;
    fstream file;
    int N, M, dv_act;
    
    file.open(datfilename.c_str());
    it_assert(file.is_open(),
              "main(): Could not open file \""
              << datfilename << "\" for reading");
    
    // Get Codesize
    getline(file, line);
    ss << line;
    ss >> N;
    it_assert(!ss.fail(), "Cannot read codewordlength N!");
    it_assert(N > 0, "N must be positive!");
    ss.seekg(0, std::ios::end);
    ss.clear();
    // Get Paritysize
    getline(file, line);
    ss << line;
    ss >> M;
    it_assert(!ss.fail(), "Cannot read number of parity constraints M!");
    it_assert(M > 0, "M must be positive!");
    ss.seekg(0, std::ios::end);
    ss.clear();
    // Maximum variable node degree
    getline(file, line);
    ss << line;
    ss >> dv_act;
    it_assert(!ss.fail(), "Cannot read number of parity constraints M!");
    it_assert(dv_act > 0, "dv_act must be positive!");
    ss.seekg(0, std::ios::end);
    ss.clear();
    
    
    GF2mat_sparse H(M,N);
    
    for(int mm=0; mm<M; mm++){
        getline(file, line);
        ss << line;
        for(int dd=0; dd<dv_act; dd++){
            int nn;
            ss >> nn;
            it_assert(!ss.fail(), "Cannot read Element " << dd << " in row "<< mm);
            it_assert(nn >= 0 && nn <= N, "Variable node index out of range!");
            if(nn>0) H.set(mm,nn-1,1);
        }
        ss.seekg(0, std::ios::end);
        ss.clear();
    }
    
    file.close();
    
    GF2mat_sparse_alist Halist;
    
    Halist.from_sparse(H);
    Halist.write(alistfilename);
    
    return EXIT_SUCCESS;
}
